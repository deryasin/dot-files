#!/usr/bin/env python3

import psutil
import argparse
import subprocess
import json

parser = argparse.ArgumentParser()
parser.add_argument('--monitor',
                    dest='monitor',
                    default="0"
                    )
args = parser.parse_args()

_json = subprocess.run(["hyprctl", "monitors", "-j"], capture_output=True).stdout
monitors = json.loads(_json)

_json = subprocess.run(["hyprctl", "workspaces", "-j"], capture_output=True).stdout
workspaces = json.loads(_json)


_json = subprocess.run(["hyprctl", "clients", "-j"], capture_output=True).stdout
clients = json.loads(_json)



workspaces_data = {}
for workspace in workspaces:
    id              =   workspace["id"]
    name            =   workspace["name"]
    monitor         =   workspace["monitor"]
    monitorID       =   workspace["monitorID"]
    windows         =   workspace["windows"]
    hasfullscreen   =   workspace["hasfullscreen"]
    lastwindow      =   workspace["lastwindow"]
    lastwindowtitle =   workspace["lastwindowtitle"]
    activeWorkspace =   False
    workspaces_data[id] = {"name": name, "monitor": monitor, "monitorID": monitorID, "windows": windows, "hasfullscreen": hasfullscreen, "lastwindow": lastwindow, "lastwindowtitle": lastwindowtitle, "activeWorkspace": False}


monitor = args.monitor
activeWorkspace = monitors[".id" == monitor]["activeWorkspace"]["id"]
workspaces_data[id]["activeWorkspace"] = True


icons={"default": " ", "default_zero": " ", "terminal": " ", "code": " ", "social": " ","music": " ", "documents": " ", "mail": "󰻧 ", "browser": " "}
for workspace in workspaces: 
    id              =   workspace["id"]
    


    workspace_clients=[]
    for client in clients:
        if client["workspace"]["id"] == id:
            workspace_clients.append(client)
    
    workspace_clients_classes = []
    for client in workspace_clients:
        if client["fullscreen"]:
            workspace_clients_classes = [client["initialClass"]]
            break
        else:
            initialClass = client["initialClass"]
            workspace_clients_classes.append(initialClass) 
    print(set(workspace_clients_classes)) 
    if len(set(workspace_clients_classes)) == len(workspace_clients_classes) and len(workspace_clients_classes) > 1 and not client["fullscreen"]:
        workspace_clients_primary = None
    else:
        workspace_clients_primary = max(set(workspace_clients_classes), key = workspace_clients_classes.count)
    
    match workspace_clients_primary:
        case "org.wezfurlong.wezterm":
            workspace_icon  =   icons["terminal"]
        case "firefox":
            workspace_icon  =   icons["browser"]  
        case _:
            workspace_icon  =   icons["default"]

    if (id == 1) and workspace_icon == icons["default"]:
        workspace_icon = icons["default_zero"]
    workspace_classes = ["activeWorkspace" if id == activeWorkspace else ""] 
    workspaces_data[id].update({"icon": workspace_icon, "classes": " ".join(workspace_classes)})
print(json.dumps(workspaces_data))
#name            =   workspace["name"]
#    monitor         =   workspace["monitor"]
#    monitorID       =   workspace["monitorID"]
#    windows         =   workspace["windows"]
#    hasfullscreen   =   workspace["hasfullscreen"]
#    lastwindow      =   workspace["lastwindow"]
#    lastwindowtitle =   workspace["lastwindowtitle"]
#    activeWorkspace =   False
#    workspaces_data[id] = {"icon": "", "classes": []}


#workspaces_data_converted = {}
#for workspace in workspaces_data:
#   workspaces_data_converted.update({workspace: []})
#    for key, item in workspaces_data[workspace].items():
#        workspaces_data_converted[workspace].append(f"{key}_{item}")

#print(workspaces_data_converted)
#for key, item in workspacesClasses.items():
#    if int(key) == int(activeWorkspace):
#        workspacesClasses[key].append("activeWorkspace")
#
#for key, item in workspacesClasses.items():
#    workspacesClasses[key] = "".join(workspacesClasses[key])

#print(json.dumps(workspacesClasses))
